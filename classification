import cv2 as cv
import numpy as np
import matplotlib.pylab as plt
from sklearn import datasets,svm,metrics
from sklearn.datasets import load_digits
from sklearn.model_selection import train_test_split

digits=datasets.load_digits()
print('digits datasets keys\n {}'.format(digits.keys()))

#to show shape of digits
digits=load_digits()
print('shape of data',digits.data.shape)

print('dataset target name:\n{}\n'.format(digits.target_names))
print('shape of dataset:{}'.format(digits.data.shape))
print('shape of target:{}'.format(digits.target.shape))
print('shape of images:{}',digits.images.shape)
#loop to give image pixel value
for i in range(10):
    plt.subplot(2,5,i+1)
    plt.axis('off')
    plt.imshow(digits.images[i],cmap='gray_r',interpolation='nearest')
    plt.title('target {}'.format(i))
plt.show()






import cv2 as cv
import numpy as np
import matplotlib.pylab as plt
from sklearn import datasets,svm,metrics
from sklearn.datasets import load_digits
from sklearn.model_selection import train_test_split

digits=datasets.load_digits()
print('digits datasets keys\n {}'.format(digits.keys()))

#to show shape of digits
digits=load_digits()
data_flattened=digits.images.reshape((len(digits.images),-1))
print('shape of data',digits.data.shape)
x_train,x_test,y_train,y_test=train_test_split(data_flattened,digits.target,test_size=0.3,shuffle=True)
print('x_train=',x_train)
print('x_test=',x_test)
print('y_train=',y_train)
print('trainig data size={}'.format(x_train.shape))
print('training target size={}'.format(y_train.shape))
print('test data size={}'.format(x_test.shape))
print('test target size={}'.format(y_test.shape))

classifier=svm.SVC(gamma=0.5)
img=classifier.fit(x_train,y_train)
a=np.array([[255.0,255.0,255.0,255.0,255.0,255.0,255.0,0.0],
            [0.0,0.0,0.0,0.0,0.0,255.0,0.,0.0],
            [0.0,0.0,0.0,0.0,255.0,0.0,0.0,0.0],
            [0.0,0.0,0.0,255.0,0.0,0.0,0.0,0.0],
            [0.0,0.0,255.0,0.0,0.0,0.0,0.0,0.0],
            [0.0,255.0,0.0,0.0,0.0,0.0,0.0,0.0],
            [255.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0],
            [0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0]],dtype="uint8")
cv.imshow('img',a)

#y_pred=classifier.predict(x_test)
#print('y=',y_pred[0])
#print('confusuion matrix \n%s'%metrics.confusion_matrix(y_test,y_pred))

